---
## Set default image, imageTag, and imagePullPolicy. mode is used to indicate the
##
image:
  repository: swaggerapi/swagger-ui
  tag: v3.52.5
  pullPolicy: IfNotPresent

imagePullSecrets: []

## Used to provide the location of the openapi.json file.
## If jsonPath is empty the chart try to get a json file at the jsonUrl address. 
## The server fields have to use to add a custom server.
swaggerui :
  jsonPath : ""
  jsonUrl : https://raw.githubusercontent.com/argoproj/argo-rollouts/master/pkg/apiclient/rollout/rollout.swagger.json
  server :
    url: http://argo-rollouts-api.awx.kr
    description: "helm-online"

## Configure the deployment resource 
##
deployment:
  replicas: 1
  jsonNoCheckCertificate: false
  extraEnv:
  # - name: BASE_URL
  #   value: /swagger

## Expose the swagger-ui service and
## Provides options for the service so chart users have the full choice
## Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  annotations: {}
  clusterIP: ""
  externalIPs: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  type: NodePort
  port: 8080

## Set the LoadBalancer service type to internal only.
## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
##
# loadBalancerIP:

## Load Balancer sources
## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
##
# loadBalancerSourceRanges:
# - 10.10.10.0/24

## Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: enable
  annotations:
    - --nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    #- --cert-manager.io/cluster-issuer: letsencrypt-prod
  path: /
  hosts:
    - argo-rollouts-api.awx.kr
  tls: []
  #  - secretName: argorolloutsapi-awx-kr-cert
  #    hosts:
  #      - argo-rollouts-api.awx.kr

## Configure liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
#readinessProbe:
#  httpGet:
#    path: /
#    port: http
#  initialDelaySeconds: 60
#  periodSeconds: 15
#  timeoutSeconds: 10

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

